{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,WAAYC,SAASC,cAAc,kBACnCC,UAAWF,SAASC,cAAc,iBAClCE,YAAaH,SAASC,cAAc,mBACpCG,OAAQJ,SAASK,iBAAiB,mBAClCC,KAAMN,SAASC,cAAc,SAC7BM,UAAWP,SAASC,cAAc,oBAGpC,SAASO,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIbZ,EAAKQ,KAAKY,iBAAiB,UAAUC,IACnCA,EAAEC,iBACF,MAAMC,EAAQC,OAAOxB,EAAKC,WAAWwB,OAC/BC,EAAOF,OAAOxB,EAAKI,UAAUqB,OAC7BE,EAASH,OAAOxB,EAAKK,YAAYoB,OAEvC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAEhClB,EAAckB,EADFL,EAAQG,GAAQE,EAAI,IAE7BC,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBd,EAAAgC,OAAOC,QAAQ,qBAAqBpB,QAAeC,MAAW,CAC5DoB,SAAU,OACVC,MAAO,QACPC,QAAS,QACTC,aAAc,MACdC,cAAc,GACd,IAEHC,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBd,EAAAgC,OAAOQ,QAAQ,oBAAoB3B,QAAeC,MAAW,CAC3DoB,SAAU,OACVC,MAAO,QACPC,QAAS,QACTC,aAAc,MACdC,cAAc,GACd,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\n\nconst refs = {\n  delayInput: document.querySelector('[name=\"delay\"]'),\n  stepInput: document.querySelector('[name=\"step\"]'),\n  amountInput: document.querySelector('[name=\"amount\"]'),\n  inputs: document.querySelectorAll('[type=\"number\"]'),\n  form: document.querySelector('.form'),\n  submitBtn: document.querySelector('[type=\"submit\"]'),\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n  const delay = Number(refs.delayInput.value);\n  const step = Number(refs.stepInput.value);\n  const amount = Number(refs.amountInput.value);\n\n  for (let i = 1; i <= amount; i++) {\n    let timer = delay + step * (i - 1);\n    createPromise(i, timer)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n          fontSize: '16px',\n          width: '360px',\n          svgSize: '120px',\n          borderRadius: '8px',\n          clickToClose: true,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n          fontSize: '16px',\n          width: '360px',\n          svgSize: '120px',\n          borderRadius: '8px',\n          clickToClose: true,\n        });\n      });\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","delayInput","document","querySelector","stepInput","amountInput","inputs","querySelectorAll","form","submitBtn","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","step","amount","i","then","Notify","success","fontSize","width","svgSize","borderRadius","clickToClose","catch","failure"],"version":3,"file":"03-promises.e786c529.js.map"}